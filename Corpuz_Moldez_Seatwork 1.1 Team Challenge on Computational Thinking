# Load and their values
people_dict = {
    "Roman": 90,
    "Verlyn": 80,
    "Lloyd": 60,
    "Robin": 40,
    "supplies": 20
}

limit = 100  # Weight limit

# Create a list for people with their weights
people = list(people_dict.values())

safe_side = []  # People who have crossed the river
boat = []       # People on the boat

# Finds a valid pair to send across while staying under the weight limit.
def find_valid_pair(people):
    for each_person in range(len(people)):
        for next_person in range(each_person + 1, len(people)):
            if people[each_person] + people[next_person] <= limit:
                return people[each_person], people[next_person]
    return None, None

# Main function for the river crossing sequence
def sequenceOver(people):
    safe_side = []  # People who have crossed the river
    boat = []       # People on the boat

    # Start with Lloyd and Robin
    p1, p2 = people_dict['Lloyd'], people_dict['Robin']
    print(f"Lloyd and Robin rode the boat across.")
    boat.extend([p1, p2])
    people.remove(p1)
    people.remove(p2)

    # One person stays, the other returns with the boat
    returning = min(p1, p2)  # The lighter person returns
    returning_name = next(name for name, weight in people_dict.items() if weight == returning)

    safe_side.append(max(p1, p2))  # The heavier one stays on the safe side
    max_name = next(name for name, weight in people_dict.items() if weight == max(p1, p2))

    print(f"{max_name} stays on the safe side. {returning_name} returns with the boat.")
    print(f"Safe side: {[name for name in people_dict if people_dict[name] in safe_side]}\n")  # Show the updated safe side

    people.append(returning)  # Add the returning person back to the start side

    # Continue with the rest of the sequenceOver logic to get everyone across
    while len(safe_side) < len(people_dict) - 1:  # Until everyone but the last person has crossed
        # Find a valid pair to send across
        p1, p2 = find_valid_pair(people)

        # Null case: Ask the user to choose if no valid pair found
        if p1 is None or p2 is None:
            print(f"People left to cross: {[name for name, weight in people_dict.items() if weight in people and weight not in safe_side]}")
            choice = input("Choose person: ")
            p1 = people_dict[choice]  # Assuming user chooses a valid person from remaining people
            people.remove(p1)
            safe_side.append(p1)
            continue

        # Get the names of the people based on their weights
        p1_name = next(name for name, weight in people_dict.items() if weight == p1)
        p2_name = next(name for name, weight in people_dict.items() if weight == p2)

        # Move the pair across
        print(f"{p1_name} and {p2_name} rode the boat across.")
        boat.extend([p1, p2])  # They enter the boat
        people.remove(p1)
        people.remove(p2)

        # One person stays, the other returns with the boat
        returning = min(p1, p2)  # The lighter person returns
        returning_name = next(name for name, weight in people_dict.items() if weight == returning)

        safe_side.append(max(p1, p2))  # The heavier one stays on the safe side
        max_name = next(name for name, weight in people_dict.items() if weight == max(p1, p2))

        print(f"{max_name} stays on the safe side. {returning_name} returns with the boat.")
        print(f"Safe side: {[name for name in people_dict if people_dict[name] in safe_side]}\n")  # Show the updated safe side

        people.append(returning)  # Add the returning person back to the start side

    print("\nAll people safely crossed the river!")

# Simulation
sequenceOver(people)
